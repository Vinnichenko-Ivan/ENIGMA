
/*
g++ -ggdb `pkg-config --cflags opencv`  test.cpp -o test `pkg-config --libs opencv` 
*/


struct RGB {
    int blue;
    int green;
    int red;  };


#include <cv.h>
#include <highgui.h>
#include <stdlib.h>
#include <stdio.h>
#include <time.h>
#include <iostream>
#include <opencv2/opencv.hpp>
#include <fstream>
#include<vector>
using namespace std;
using namespace cv;

bool matrixH[3][5]={{1,1,1,1,1},{0,0,1,0,0},{1,1,1,1,1}};
bool matrixS[3][5]={{1,1,1,1,1},{1,0,1,0,1},{1,1,1,1,1}};
bool matrixU[3][5]={{1,1,1,1,1},{0,0,0,0,1},{1,1,1,1,1}};
int main(int argc, char* argv[])
{
        

        ifstream fin("binaryParametrs");
        int hMin = 0;
        int hMax = 0;
        int sMin = 0;
        int sMax = 0;
        int vMin = 0;
        int vMax = 0;
        fin>>hMin>>hMax>>sMin>>sMax>>vMin>>vMax;
        fin.close();
        Mat frame;
        Mat edges;
        //Mat black; 
        
        Mat binaryFrame;
        VideoCapture camOne(0);
        namedWindow("window label", 1);
        namedWindow("counter", 1);
        //namedWindow("cut", 1);
        while(1)
        {
                vector< vector<Point> > contours;
                int conmax=-1,iconmax=0;
               //frame=imread("bina.jpg", CV_LOAD_IMAGE_COLOR);
                camOne>>frame;
                Mat black(frame.size().height,frame.size().width,CV_8UC3,Scalar(0));
                
                Scalar lower(hMin, sMin, vMin);
                Scalar upper(hMax, sMax, vMax);
                //inRange(frame, Scalar(0,0,0), Scalar(0,0,0), black);

                inRange(frame, lower, upper, edges);
                //cvtColor(frame, edges, CV_BGR2GRAY);
                //Canny(edges, edges, 30, 60);
                imshow("window label", edges);
                findContours(edges, contours,CV_RETR_TREE, CV_CHAIN_APPROX_NONE);
                cout<<contours.size()<<endl;
                

               for(int i=0;i<contours.size();i++)
               {
                        //cout<< contourArea(contours[i])<<endl;
                        // if(contourArea(contours[i])>100)
                        // {
                        //         contoursMax.push_back(contours[i]);
                        // }
                        // else
                        // {
                        //        //contours.erase(contours.begin()+i);
                        //        //cout<< contourArea(contours[i])<<endl;
                        // }
                        if(contourArea(contours[i])>conmax){
                                conmax=contourArea(contours[i]);
                                iconmax=i;
                        }
                }
                if(iconmax!=-1&&contours.size()>0){
                        vector< vector<Point> > contoursMax(0,vector<Point>(0));
                        contoursMax.push_back(contours[iconmax]);
                        RotatedRect box = cv::minAreaRect(contoursMax[0]);
                        drawContours(black, contoursMax, -1, Scalar(255,255,255), CV_FILLED);//drawContours(black, contours, -1, Scalar(255,255,255), CV_FILLED); - для закрашивания
                        waitKey(10);
                        Rect cutter = box.boundingRect();
                        vector< vector<Rect> > cutterZone(3,vector<Rect>(5,cutter));
                        rectangle(black, cutter, Scalar(255,0,0));
                        vector<vector<float>> SF(3,vector<float>(5,0));
                        for(int i=0;i<3;i++)
                        {
                                for(int j=0;j<5;j++){
                                        cutterZone[i][j].x=cutter.x+cutter.width/3*i;
                                        cutterZone[i][j].y=cutter.y+cutter.height/5*j;
                                        cutterZone[i][j].height=cutter.height/5;
                                        cutterZone[i][j].width=cutter.width/3;
                                }
                        }
                        for(int j=0;j<5;j++){
                                for(int i=0;i<3;i++){
                                        int counter=0;
                                        for(int k=cutterZone[i][j].x;k<cutterZone[i][j].x+cutterZone[i][j].width;k++)
                                        {
                                                for(int l=cutterZone[i][j].y;l<cutterZone[i][j].y+cutterZone[i][j].height;l++){
                                                        Vec3b bgrPixels = black.at<Vec3b>(Point(k, l));

                                                        if((int)bgrPixels[0] == 255 && (int)bgrPixels[1] == 255 && (int)bgrPixels[2] == 255){
                                                                counter++;
                                                        }
                                                }      
                                        }
                                        SF[i][j]=(float)counter/cutterZone[i][j].width/cutterZone[i][j].height*100;
                                }
                        }


                        for(int i=0;i<5;i++)
                        {
                                for(int j=0;j<3;j++)
                                {
                                        rectangle(black, cutterZone[j][i], Scalar(255,0,0));
                                }
                        }

                        bool matrix[3][5]={0};

                        for(int i=0;i<5;i++)
                        {
                                for(int j=0;j<3;j++){
                                
                                        if(SF[j][i]>10){
                                              matrix[j][i]=1;  
                                                
                                        }
                                }
                                
                        }
                        bool U=1,S=1,H=1;
                        for(int i=0;i<5;i++)
                        {
                                for(int j=0;j<3;j++)
                                {
                                        if(matrix[j][i]!=matrixH[j][i])
                                        {
                                                H=0;
                                        }
                                }
                                //cout<<endl;
                        }
                        for(int i=0;i<5;i++)
                        {
                                for(int j=0;j<3;j++)
                                {
                                        if(matrix[j][i]!=matrixS[j][i])
                                        {
                                                S=0;
                                        }
                                }
                                //cout<<endl;
                        }

                        for(int i=0;i<5;i++)
                        {
                                for(int j=0;j<3;j++)
                                {
                                        if(matrix[j][i]!=matrixU[j][i])
                                        {
                                                U=0;
                                        }
                                }
                                //cout<<endl;
                        }
                        imshow("counter", black);
                        if(U)
                        {
                                cout<<"U"<<endl;
                        }
                        else if(S)
                        {
                                cout<<"S"<<endl;
                        }
                        else if(H)
                        {
                                cout<<"H"<<endl;
                        }
                        else
                        {
                                cout<<"else"<<endl;
                        }
                }

        }
        return 0;

}
//   /      \
//
///
//
//   \      /
