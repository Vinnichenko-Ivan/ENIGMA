#include <iostream>
#include <random>
#include <ctime>
#include <string>
#include <time.h> 
#include <unistd.h>
#include <vector>
using namespace std;
#define x 10
#define y 10
string steck="";
int leftD,rightD,straightD,backD;
int buff;
int xrobot=5,yrobot=5,robotAngel=1;
int fild [x][y][6]={0};
vector<int> memoryX(1,0);
vector<int> memoryY(1,0);
int myCordX=0,myCordY=0;
int myNewCordX=0,myNewCordY=0;
int counterMem=0;
int lefting,righting,straighting;
int memorySearch(int xC,int yC){
	int count=0;
	for(int i=0;i<counterMem;i++)
	{
		if(memoryX[i]==xC&&memoryY[i]==yC){
			count++;
		}
	}
	return count;
}

void memory(int xC,int yC){
	counterMem++;
	memoryX.push_back(xC);
	memoryY.push_back(yC);
}
void generate(){
	for(int xi=0;xi<x;xi++){
		for(int yi=0;yi<y;yi++){
			buff=rand()%2;
			fild[xi][yi][rand()%4+1]=1;
		}
	}
	 for(int xi=0;xi<x;xi++){
	 	for(int yi=0;yi<y;yi++){
			for(int n=1;n<5;n++){
				if(n==1&&yi>0){
					fild[xi][yi-1][3]=fild[xi][yi][1];
				}
				if(n==2&&xi<x-1){
					fild[xi+1][yi][4]=fild[xi][yi][2];
				}
				if(n==3&&yi<y-1){
					fild[xi][yi+1][1]=fild[xi][yi][3];
				}
				if(n==4&&xi>0){
					fild[xi-1][yi][2]=fild[xi][yi][4];
				}
			}
		}		
	}
	for(int ix=0;ix<x;ix++){
		fild[ix][0][1]=1;
	}
	for(int ix=0;ix<x;ix++){
		fild[ix][y-1][3]=1;
	}
	for(int yx=0;yx<y;yx++){
		fild[0][yx][4]=1;
	}
	for(int yx=0;yx<y;yx++){
		fild[x-1][yx][2]=1;
	}
}
void draw(){
	system("clear");	
	for(int yi=0;yi<y;yi++){
		for(int xi=0;xi<x;xi++){
			if(fild[xi][yi][4]==1){
				cout<<"\x1B[0;34;40m"<<1<<"\x1B[0;0;40m";
			}
			else{
				if(fild[xi][yi][1]){
					cout<<"\x1B[0;34;40m"<<1<<"\x1B[0;0;40m";
				}
				else{
					cout<<fild[xi][yi][1];
				}
			}
			if(fild[xi][yi][1]){
					cout<<"\x1B[0;34;40m"<<1<<"\x1B[0;0;40m";
				}
				else{
					cout<<fild[xi][yi][1];
				}
			if(fild[xi][yi][2]==1){
				cout<<"\x1B[0;34;40m"<<1<<"\x1B[0;0;40m";
			}
			else{
				if(fild[xi][yi][1]){
					cout<<"\x1B[0;34;40m"<<1<<"\x1B[0;0;40m";
				}
				else{
					cout<<fild[xi][yi][1];
				}
			}
		}
		cout<<endl;
		for(int xi=0;xi<x;xi++){
			if(fild[xi][yi][4]){
					cout<<"\x1B[0;34;40m"<<1<<"\x1B[0;0;40m";
				}
				else{
					cout<<fild[xi][yi][4];
				}
			if(fild[xi][yi][0]==0){
				cout<<"\x1B[0;31;40m"<<fild[xi][yi][0]<<"\x1B[0;0;40m";
			}
			else if(fild[xi][yi][0]==1){
				cout<<"\x1B[0;33;40m"<<fild[xi][yi][0]<<"\x1B[0;0;40m";
			}
			else{
				cout<<"\x1B[1;32;40m"<<fild[xi][yi][0]<<"\x1B[0;0;40m";
			}
			if(fild[xi][yi][2]){
				cout<<"\x1B[0;34;40m"<<1<<"\x1B[0;0;40m";
			}
			else{
				cout<<fild[xi][yi][2];
			}
		}
		cout<<endl;
		for(int xi=0;xi<x;xi++){
			if(fild[xi][yi][4]==1){
				cout<<"\x1B[0;34;40m"<<1<<"\x1B[0;0;40m";
			}
			else{
				if(fild[xi][yi][3]){
					cout<<"\x1B[0;34;40m"<<1<<"\x1B[0;0;40m";
				}
				else{
					cout<<fild[xi][yi][3];
				}
			}
			if(fild[xi][yi][3]){
				cout<<"\x1B[0;34;40m"<<1<<"\x1B[0;0;40m";
			}
			else{
				cout<<fild[xi][yi][3];
			}
			if(fild[xi][yi][2]==1){
				cout<<"\x1B[0;34;40m"<<1<<"\x1B[0;0;40m";
			}
			else{
				if(fild[xi][yi][3]){
					cout<<"\x1B[0;34;40m"<<1<<"\x1B[0;0;40m";
				}
				else{
					cout<<fild[xi][yi][3];
				}
			}
		}
		if(yi==0){
			cout<<"straightD: "<<straightD;	
		}
		if(yi==1){
			cout<<"rightD: "<<rightD;	
		}
		if(yi==2){
			cout<<"leftD: "<<leftD;	
		}
		if(yi==3){
			cout<<"backD: "<<backD;	
		}
		if(yi==4){
			cout<<"angel: ";
			if(robotAngel==1){
				cout<<"↑";
			}
			if(robotAngel==2){
				cout<<"→";
			}
			if(robotAngel==3){
				cout<<"↓";
			}
			if(robotAngel==4){
				cout<<"←";
			}	
		}
		cout<<endl;
	}
		}
void left (){
	steck+='l';
	robotAngel--;
	if(robotAngel==0){
		robotAngel=4;
	}
}
void right(){
	steck+='r';
	robotAngel++;
	if(robotAngel==5){
		robotAngel=1;
	}
}
void leftP (){
	robotAngel--;
	if(robotAngel==0){
		robotAngel=4;
	}
}
void rightP(){
	robotAngel++;
	if(robotAngel==5){
		robotAngel=1;
	}
}
void distanse(){
	straightD=fild[xrobot][yrobot][robotAngel];
	if(robotAngel==1){
		leftD=fild[xrobot][yrobot][4];
	}
	else{
		leftD=fild[xrobot][yrobot][robotAngel-1];
	}
	if(robotAngel==4){
		rightD=fild[xrobot][yrobot][1];
	}
	else{
		rightD=fild[xrobot][yrobot][robotAngel+1];
	}
	if(robotAngel==1||robotAngel==2){
		backD=fild[xrobot][yrobot][robotAngel+2];
	}
	else{
		backD=fild[xrobot][yrobot][robotAngel-2];	
	}
}
void NewCord(int angel){
	if(angel==1){
		rightP();
	}
	if(angel==-1){
		leftP();
	}
	if(robotAngel==1){
		myNewCordY=myCordY-1;
		myNewCordX=myCordX;
		}
	if(robotAngel==2){
		myNewCordX=myCordX+1;
		myNewCordY=myCordY;
	}
	if(robotAngel==3){
		myNewCordY=myCordY+1;
		myNewCordX=myCordX;
	}
	if(robotAngel==4){
		myNewCordX=myCordX-1;
		myNewCordY=myCordY;
	}
	if(angel==1){
		leftP();
	}
	if(angel==-1){
		rightP();
	}
}
void  go(){
	if(fild[xrobot][yrobot][robotAngel]==0){
		steck+='g';

		fild[xrobot][yrobot][0]=1;

		if(robotAngel==1){
			yrobot-=1;
			myCordY-=1;
		}
		if(robotAngel==2){
			xrobot+=1;
			myCordX+=1;
		}
		if(robotAngel==3){
			yrobot+=1;
			myCordY+=1;
		}
		if(robotAngel==4){
			xrobot-=1;
			myCordX-=1;
		}
		fild[xrobot][yrobot][0]=2;
	}
	else{
		steck+='c';
	}
	memory(myCordX,myCordY);
	usleep(250000);
	draw();
}
void sensControll(){
		char a;
		cin>>a;
		if(a=='g'){
			go();
		}
		if(a=='l'){
			left();
			draw();
		}
		if(a=='r'){
			right();
			draw();
		}
		cout<<endl;
		cout<<"myCord "<<myCordX<<" : "<<myCordY<<endl;
		NewCord(0);
		cout<<"cordStr "<<myNewCordX<<" : "<<myNewCordY;
}
void randomeGo(){
	buff=rand()%100;
	if(buff<34){
		if(straightD==0){
			go();
		}
		else if(leftD==0){
			left();
			go();
		}	
		else if(rightD==0){
			right();
			go();
		}
		else{
			right();
		}
	}
	else if(buff>66){
		if(leftD==0){
			left();
			go();
		}	
		else if(rightD==0){
			right();
			go();
		}
		else if(straightD==0){
			go();
		}
		else{
			right();
		}
	}
	else{	
		if(rightD==0){
			right();
			go();
		}
		else if(straightD==0){
			go();
		}
		else if(leftD==0){
			left();
			go();
		}
		else{
			right();
		}		
	}
}
void algorithm(){
	distanse();
	memoryX[0]=0;
	memoryY[0]=0;
	counterMem=1;
	for(int i =0 ;i<190;i++){
		lefting=0;
		righting=0;
		straighting=0;
		//draw();
		distanse();
		NewCord(-1);
		lefting=memorySearch(myNewCordX,myNewCordY);
		NewCord(0);
		straighting=memorySearch(myNewCordX,myNewCordY);
		NewCord(1);
		righting=memorySearch(myNewCordX,myNewCordY);
		cout<<endl<<"radar"<<lefting<<" "<<straighting<<" "<<righting<<" "<<endl;
		if(leftD==0&&lefting==0){
			left();
			go();
		}	
		else if(rightD==0&&righting==0){
			right();
			go();
		}
		else if(straightD==0&&straighting==0){
			go();
		}
		else if(leftD==0&&lefting<righting&&lefting<straighting){
			left();
			go();
		}	
		else if(rightD==0&&righting<lefting&&righting<straighting){
			right();
			go();
		}
		else if(straightD==0&&straighting<lefting&&straighting<righting){
			go();
		}
		// else if(leftD==0){
		// 	left();
		// 	go();
		// }	
		// else if(rightD==0){
		// 	right();
		// 	go();
		// }
		// else if(straightD==0){
		// 	go();
		// }
		else{
			randomeGo();
		}
	}
	draw();
}
void test(){
	fild[yrobot][xrobot][0]=2;
	usleep(1000000);
	draw();
}
int main()
{
	cout<<"\x1B[0;0;40m";
	srand( time(0) );
	xrobot=rand()%x;
	yrobot=rand()%y;
	generate();
	//test();
	draw();
	algorithm();
	draw();
	cout<<rand()%2<<"\x1B[0;2;40m"<<endl<<steck<<endl;
    return 0;
}
